import os
import logging
import requests
import re
import threading
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from dotenv import load_dotenv
from flask import Flask

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# Flask app –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ OSINT Bot is running!"

@app.route('/health')
def health():
    return "‚úÖ OK"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN not found")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = [['/start', '/help'], ['IP Info', 'Domain Check']]

async def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n–Ø OSINT –±–æ—Ç. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ:\n‚Ä¢ IP –∞–¥—Ä–µ—Å\n‚Ä¢ –î–æ–º–µ–Ω\n‚Ä¢ Email\n‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

async def help_command(update: Update, context: CallbackContext) -> None:
    help_text = """
üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üîç IP Info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IP
üåê Domain Check - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–∞  
üìß Email - –±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
üìû Phone - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–º–µ—Ä–µ

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!
"""
    await update.message.reply_text(help_text)

async def handle_message(update: Update, context: CallbackContext) -> None:
    text = update.message.text.strip()
    
    if text == 'IP Info':
        await update.message.reply_text("üîç –û—Ç–ø—Ä–∞–≤—å IP –∞–¥—Ä–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 8.8.8.8)")
    elif text == 'Domain Check':
        await update.message.reply_text("üåê –û—Ç–ø—Ä–∞–≤—å –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: google.com)")
    elif is_ip_address(text):
        await get_ip_info(update, text)
    elif is_domain(text):
        await get_domain_info(update, text)
    elif is_email(text):
        await get_email_info(update, text)
    elif is_phone_number(text):
        await get_phone_info(update, text)
    else:
        await update.message.reply_text("‚ùå –ù–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

def is_ip_address(text: str) -> bool:
    pattern = r'^(\d{1,3}\.){3}\d{1,3}$'
    if re.match(pattern, text):
        return all(0 <= int(part) <= 255 for part in text.split('.'))
    return False

def is_phone_number(text: str) -> bool:
    pattern = r'^\+?[1-9]\d{1,14}$'
    return bool(re.match(pattern, text.replace(' ', '')))

def is_domain(text: str) -> bool:
    pattern = r'^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z]{2,})+$'
    return bool(re.match(pattern, text))

def is_email(text: str) -> bool:
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return bool(re.match(pattern, text))

async def get_ip_info(update: Update, ip: str) -> None:
    try:
        await update.message.reply_text("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é IP...")
        response = requests.get(f'http://ipapi.co/{ip}/json/', timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            info = f"""
üåê IP: {ip}
üìç –°—Ç—Ä–∞–Ω–∞: {data.get('country_name', 'N/A')}
üèôÔ∏è –ì–æ—Ä–æ–¥: {data.get('city', 'N/A')}
üì° –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {data.get('org', 'N/A')}
‚è∞ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {data.get('timezone', 'N/A')}
"""
            await update.message.reply_text(info)
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± IP")
            
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ IP")

async def get_domain_info(update: Update, domain: str) -> None:
    try:
        await update.message.reply_text("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ–º–µ–Ω...")
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å
        info = f"""
üåê –î–æ–º–µ–Ω: {domain}
‚úÖ –§–æ—Ä–º–∞—Ç: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
üí° –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π WHOIS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
"""
        await update.message.reply_text(info)
        
    except Exception:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ–º–µ–Ω–∞")

async def get_email_info(update: Update, email: str) -> None:
    try:
        await update.message.reply_text("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é email...")
        domain = email.split('@')[1] if '@' in email else ''
        
        info = f"""
üìß Email: {email}
üåê –î–æ–º–µ–Ω: {domain}
‚úÖ –§–æ—Ä–º–∞—Ç: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
"""
        await update.message.reply_text(info)
        
    except Exception:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ email")

async def get_phone_info(update: Update, phone: str) -> None:
    try:
        await update.message.reply_text("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–æ–º–µ—Ä...")
        cleaned = phone.replace('+', '').replace(' ', '')
        
        info = f"""
üìû –ù–æ–º–µ—Ä: {phone}
üî¢ –§–æ—Ä–º–∞—Ç: +{cleaned}
üìè –î–ª–∏–Ω–∞: {len(cleaned)} —Ü–∏—Ñ—Ä
"""
        await update.message.reply_text(info)
        
    except Exception:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–æ–º–µ—Ä–∞")

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=run_bot, daemon=True)
    bot_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –¥–ª—è Railway
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)
