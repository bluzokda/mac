# main.py ‚Äî webhook –≤–µ—Ä—Å–∏—è –¥–ª—è Railway

import os
import logging
import requests
import re
import ipaddress
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)
from flask import Flask, request

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º URL —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è ‚Äî Railway –¥–∞—Å—Ç –µ–≥–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
WEBHOOK_URL = f"https://{os.getenv('RAILWAY_PUBLIC_DOMAIN')}" if os.getenv('RAILWAY_PUBLIC_DOMAIN') else None

if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN not found!")
    exit(1)

if not WEBHOOK_URL:
    # –ï—Å–ª–∏ RAILWAY_PUBLIC_DOMAIN –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
    # –í Railway —ç—Ç–æ –æ–±—ã—á–Ω–æ https://<project>.up.railway.app
    # –ù–æ –µ—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ API –∏–ª–∏ –≤—Ä—É—á–Ω—É—é
    logger.warning("‚ö†Ô∏è RAILWAY_PUBLIC_DOMAIN not set. Using fallback.")
    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –º–æ–∂–µ—à—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é
    WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://your-project.up.railway.app")

# Flask app
app = Flask(__name__)

# Telegram application
application = Application.builder().token(BOT_TOKEN).build()

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
keyboard = [['/start', '/help'], ['IP Info', 'Domain Check']]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n–û—Ç–ø—Ä–∞–≤—å IP, –¥–æ–º–µ–Ω, email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω.",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìñ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text == 'IP Info':
        await update.message.reply_text("üîç –û—Ç–ø—Ä–∞–≤—å IP (–Ω–∞–ø—Ä–∏–º–µ—Ä: 8.8.8.8)")
    elif text == 'Domain Check':
        await update.message.reply_text("üåê –û—Ç–ø—Ä–∞–≤—å –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: google.com)")
    elif is_ip(text):
        await get_ip_info(update, text)
    else:
        await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã.")

def is_ip(text):
    try:
        ipaddress.ip_address(text)
        return True
    except ValueError:
        return False

async def get_ip_info(update: Update, ip: str):
    try:
        await update.message.reply_text("üîÑ –ó–∞–ø—Ä–æ—Å...")
        r = requests.get(f"https://ipapi.co/{ip}/json/", timeout=10)
        if r.status_code == 200:
            d = r.json()
            msg = f"üåê IP: {ip}\nüìç –°—Ç—Ä–∞–Ω–∞: {d.get('country_name', 'N/A')}"
            await update.message.reply_text(msg)
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ API")
    except Exception as e:
        logger.error(f"IP error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞")

# === Flask routes ===
@app.route('/')
def home():
    return "ü§ñ OSINT Bot is running!"

@app.route('/health')
def health():
    return "‚úÖ OK"

# Webhook endpoint –¥–ª—è Telegram
@app.route(f'/webhook/{BOT_TOKEN}', methods=['POST'])
def telegram_webhook():
    application.update_queue.put_nowait(
        Update.de_json(request.get_json(force=True), application.bot)
    )
    return 'OK'

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
def init_bot():
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    webhook_full_url = f"{WEBHOOK_URL}/webhook/{BOT_TOKEN}"
    application.bot.set_webhook(url=webhook_full_url)
    logger.info(f"üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_full_url}")

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    init_bot()
    port = int(os.environ.get("PORT", 5000))
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Flask –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host="0.0.0.0", port=port, debug=False, use_reloader=False)
