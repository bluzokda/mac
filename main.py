import os
import logging
import requests
import whois
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from dotenv import load_dotenv
from flask import Flask

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# Flask app –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è (health checks)
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ OSINT Bot is running!"

@app.route('/health')
def health():
    return "‚úÖ OK"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN not found in environment variables")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
keyboard = [
    ['/start', '/help'],
    ['IP Info', 'Phone Info'],
    ['Whois Lookup', 'Email Check']
]

async def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–Ø OSINT –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
‚Ä¢ /help - –ø–æ–º–æ—â—å
‚Ä¢ IP Info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IP –∞–¥—Ä–µ—Å–µ
‚Ä¢ Phone Info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–º–µ—Ä–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
‚Ä¢ Whois Lookup - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–º–µ–Ω–µ
‚Ä¢ Email Check - –ø—Ä–æ–≤–µ—Ä–∫–∞ email

–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!
    """
    await update.message.reply_text(
        welcome_text,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

async def help_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üîç IP Info:
–û—Ç–ø—Ä–∞–≤—å IP –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏, –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ –∏ —Ç.–¥.

üìû Phone Info:
–û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ñ–æ—Ä–º–∞—Ç: +79123456789)

üåê Whois Lookup:
–û—Ç–ø—Ä–∞–≤—å –¥–æ–º–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è whois –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

üìß Email Check:
–û—Ç–ø—Ä–∞–≤—å email –∞–¥—Ä–µ—Å –¥–ª—è –±–∞–∑–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏

–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
‚Ä¢ 8.8.8.8
‚Ä¢ +79123456789  
‚Ä¢ google.com
‚Ä¢ test@example.com
    """
    await update.message.reply_text(help_text)

async def handle_message(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    user_input = update.message.text.strip()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if is_ip_address(user_input):
        await get_ip_info(update, user_input)
    elif is_phone_number(user_input):
        await get_phone_info(update, user_input)
    elif is_domain(user_input):
        await get_whois_info(update, user_input)
    elif is_email(user_input):
        await get_email_info(update, user_input)
    elif text in ['IP Info', 'Phone Info', 'Whois Lookup', 'Email Check']:
        await handle_button(update, text)
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö. –û—Ç–ø—Ä–∞–≤—å:\n"
            "‚Ä¢ IP –∞–¥—Ä–µ—Å (8.8.8.8)\n"
            "‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+79123456789)\n" 
            "‚Ä¢ –î–æ–º–µ–Ω (google.com)\n"
            "‚Ä¢ Email (test@example.com)\n\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ üëÜ"
        )

async def handle_button(update: Update, button_text: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    responses = {
        'IP Info': 'üîç –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ IP –∞–¥—Ä–µ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 8.8.8.8)',
        'Phone Info': 'üìû –û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ñ–æ—Ä–º–∞—Ç: +79123456789)',
        'Whois Lookup': 'üåê –û—Ç–ø—Ä–∞–≤—å –¥–æ–º–µ–Ω –¥–ª—è whois –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: google.com)',
        'Email Check': 'üìß –û—Ç–ø—Ä–∞–≤—å email –∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏'
    }
    await update.message.reply_text(responses.get(button_text, '–í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é'))

# –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
def is_ip_address(text: str) -> bool:
    import re
    ip_pattern = r'^(\d{1,3}\.){3}\d{1,3}$'
    if re.match(ip_pattern, text):
        parts = text.split('.')
        return all(0 <= int(part) <= 255 for part in parts)
    return False

def is_phone_number(text: str) -> bool:
    import re
    phone_pattern = r'^\+?[1-9]\d{1,14}$'
    return bool(re.match(phone_pattern, text.replace(' ', '')))

def is_domain(text: str) -> bool:
    import re
    domain_pattern = r'^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z]{2,})+$'
    return bool(re.match(domain_pattern, text))

def is_email(text: str) -> bool:
    import re
    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return bool(re.match(email_pattern, text))

# OSINT —Ñ—É–Ω–∫—Ü–∏–∏
async def get_ip_info(update: Update, ip: str) -> None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± IP –∞–¥—Ä–µ—Å–µ"""
    try:
        await update.message.reply_text("üîÑ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± IP...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ipapi.co (–±–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–æ 1000 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å)
        response = requests.get(f'http://ipapi.co/{ip}/json/')
        data = response.json()
        
        if 'error' in data:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± IP")
            return
            
        info_text = f"""
üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IP: {ip}

üìç **–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è:**
‚Ä¢ –°—Ç—Ä–∞–Ω–∞: {data.get('country_name', 'N/A')}
‚Ä¢ –†–µ–≥–∏–æ–Ω: {data.get('region', 'N/A')}
‚Ä¢ –ì–æ—Ä–æ–¥: {data.get('city', 'N/A')}
‚Ä¢ –ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: {data.get('postal', 'N/A')}

üì° **–ü—Ä–æ–≤–∞–π–¥–µ—Ä:**
‚Ä¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {data.get('org', 'N/A')}
‚Ä¢ ASN: {data.get('asn', 'N/A')}

üìä **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {data.get('timezone', 'N/A')}
‚Ä¢ –í–∞–ª—é—Ç–∞: {data.get('currency', 'N/A')}
‚Ä¢ –Ø–∑—ã–∫: {data.get('languages', 'N/A')}
        """
        await update.message.reply_text(info_text)
        
    except Exception as e:
        logger.error(f"Error getting IP info: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± IP")

async def get_phone_info(update: Update, phone: str) -> None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–º–µ—Ä–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    try:
        await update.message.reply_text("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞...")
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–º–µ—Ä–µ
        cleaned_phone = phone.replace('+', '').replace(' ', '')
        
        info_text = f"""
üìû –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–º–µ—Ä–µ: {phone}

üì± **–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: +{cleaned_phone}
‚Ä¢ –î–ª–∏–Ω–∞ –Ω–æ–º–µ—Ä–∞: {len(cleaned_phone)} —Ü–∏—Ñ—Ä

üí° **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** 
–î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ 
–∫ –ø–ª–∞—Ç–Ω—ã–º API (NumVerify, AbstractAPI –∏ –¥—Ä.)
        """
        await update.message.reply_text(info_text)
        
    except Exception as e:
        logger.error(f"Error getting phone info: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")

async def get_whois_info(update: Update, domain: str) -> None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ WHOIS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–º–µ–Ω–µ"""
    try:
        await update.message.reply_text("üîÑ –ü–æ–ª—É—á–∞—é WHOIS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
        
        domain_info = whois.whois(domain)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        creation_date = domain_info.creation_date
        expiration_date = domain_info.expiration_date
        updated_date = domain_info.updated_date
        
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ - —ç—Ç–æ —Å–ø–∏—Å–æ–∫, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é
        if isinstance(creation_date, list):
            creation_date = creation_date[0] if creation_date else 'N/A'
        if isinstance(expiration_date, list):
            expiration_date = expiration_date[0] if expiration_date else 'N/A'
        if isinstance(updated_date, list):
            updated_date = updated_date[0] if updated_date else 'N/A'
            
        info_text = f"""
üåê WHOIS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è: {domain}

üìÖ **–î–∞—Ç—ã:**
‚Ä¢ –°–æ–∑–¥–∞–Ω: {creation_date if creation_date else 'N/A'}
‚Ä¢ –ò—Å—Ç–µ–∫–∞–µ—Ç: {expiration_date if expiration_date else 'N/A'}
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω: {updated_date if updated_date else 'N/A'}

üë§ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä:**
‚Ä¢ Registrar: {domain_info.registrar if domain_info.registrar else 'N/A'}
‚Ä¢ WHOIS —Å–µ—Ä–≤–µ—Ä: {domain_info.whois_server if domain_info.whois_server else 'N/A'}

üîí **–°—Ç–∞—Ç—É—Å—ã:**
{chr(10).join(f'‚Ä¢ {status}' for status in domain_info.statuses) if domain_info.statuses else '‚Ä¢ N/A'}

üìß **–ö–æ–Ω—Ç–∞–∫—Ç—ã:**
‚Ä¢ Email: {domain_info.emails if domain_info.emails else 'N/A'}
        """
        await update.message.reply_text(info_text)
        
    except Exception as e:
        logger.error(f"Error getting WHOIS info: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ WHOIS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")

async def get_email_info(update: Update, email: str) -> None:
    """–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ email"""
    try:
        await update.message.reply_text("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é email...")
        
        # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ –¥–æ–º–µ–Ω–∞
        domain = email.split('@')[1] if '@' in email else ''
        
        info_text = f"""
üìß –ê–Ω–∞–ª–∏–∑ email: {email}

üìã **–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –î–æ–º–µ–Ω: {domain if domain else 'N/A'}
‚Ä¢ –§–æ—Ä–º–∞—Ç: {'‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π' if is_email(email) else '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π'}

üí° **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:**
–î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ email (HIBP, Hunter.io) 
—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º API
        """
        await update.message.reply_text(info_text)
        
    except Exception as e:
        logger.error(f"Error getting email info: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ email")

async def error_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}")
    if update and update.message:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

def run_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("Bot is starting...")
    application.run_polling()

if __name__ == '__main__':
    # –î–ª—è Railway: –∑–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ, –∞ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º
    import threading
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=run_bot, daemon=True)
    bot_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask app –¥–ª—è health checks
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)
