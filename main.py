# main.py ‚Äî OSINT –±–æ—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Å—ã–ª–æ–∫, email –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞

import os
import logging
import requests
import re
import ipaddress
import phonenumbers
from phonenumbers import geocoder, carrier
import dns.resolver
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)
from flask import Flask
import threading

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")
    exit(1)

app = Flask(__name__)

# === –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã ===

def is_ip(text):
    try:
        ipaddress.ip_address(text)
        return True
    except ValueError:
        return False

def is_email(text):
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return bool(re.match(pattern, text))

def is_phone_number(text):
    cleaned = re.sub(r'[^\d+]', '', text)
    return bool(re.match(r'^\+?[1-9]\d{1,14}$', cleaned))

def is_social_link(text):
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º: vk.com, t.me, instagram.com, facebook.com, twitter.com, youtube.com
    social_patterns = [
        r'https?://(www\.)?vk\.com/[\w.-]+',
        r'https?://(www\.)?t\.me/[\w._-]+',
        r'https?://(www\.)?instagram\.com/[\w._-]+',
        r'https?://(www\.)?facebook\.com/[\w._-]+',
        r'https?://(www\.)?twitter\.com/[\w._-]+',
        r'https?://(www\.)?youtube\.com/@[\w._-]+'
    ]
    return any(re.match(pattern, text, re.IGNORECASE) for pattern in social_patterns)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    keyboard_text = """
üîç –û—Ç–ø—Ä–∞–≤—å:
‚Ä¢ IP-–∞–¥—Ä–µ—Å (8.8.8.8)
‚Ä¢ Email (user@example.com)
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω (+79991234567)
‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ —Å–æ—Ü—Å–µ—Ç—å (https://vk.com/id123)
"""
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n{keyboard_text}"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ: '{text}' –æ—Ç {update.effective_user.id}")

    if is_ip(text):
        await get_ip_info(update, text)
    elif is_email(text):
        await get_email_info(update, text)
    elif is_phone_number(text):
        await get_phone_info(update, text)
    elif is_social_link(text):
        await get_social_info(update, text)
    else:
        await update.message.reply_text("‚ùå –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª. –û—Ç–ø—Ä–∞–≤—å IP, email, —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ—Ü—Å–µ—Ç—å.")

# === OSINT —Ñ—É–Ω–∫—Ü–∏–∏ ===

async def get_ip_info(update: Update, ip: str):
    try:
        await update.message.reply_text("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é IP...")
        r = requests.get(f"https://ipapi.co/{ip}/json/", timeout=10)
        if r.status_code == 200:
            d = r.json()
            if d.get("error"):
                await update.message.reply_text("‚ùå –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∏–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π IP.")
            else:
                msg = f"""
üåê IP: {ip}
üìç –°—Ç—Ä–∞–Ω–∞: {d.get('country_name', 'N/A')}
üèôÔ∏è –ì–æ—Ä–æ–¥: {d.get('city', 'N/A')}
üì° –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {d.get('org', 'N/A')}
"""
                await update.message.reply_text(msg)
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ API")
    except Exception as e:
        logger.error(f"IP error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ IP")

async def get_email_info(update: Update, email: str):
    try:
        await update.message.reply_text("üìß –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é email...")
        domain = email.split('@')[1]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ MX-–∑–∞–ø–∏—Å–µ–π
        try:
            mx_records = dns.resolver.resolve(domain, 'MX')
            mx_list = [str(mx.exchange) for mx in mx_records]
            mx_text = "\n".join(mx_list[:3])  # –ü–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏
        except:
            mx_text = "–ù–µ—Ç MX-–∑–∞–ø–∏—Å–µ–π"
        
        info = f"""
üìß Email: {email}
üåê –î–æ–º–µ–Ω: {domain}
üì¨ MX-—Å–µ—Ä–≤–µ—Ä—ã:
{mx_text}
"""
        await update.message.reply_text(info)
    except Exception as e:
        logger.error(f"Email error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ email")

async def get_phone_info(update: Update, phone: str):
    try:
        await update.message.reply_text("üìû –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–æ–º–µ—Ä...")
        parsed = phonenumbers.parse(phone, None)
        country = geocoder.description_for_number(parsed, "ru")
        operator = carrier.name_for_number(parsed, "ru")
        is_valid = phonenumbers.is_valid_number(parsed)
        formatted = phonenumbers.format_number(parsed, phonenumbers.PhoneNumberFormat.INTERNATIONAL)
        
        info = f"""
üìû –ù–æ–º–µ—Ä: {formatted}
üìç –°—Ç—Ä–∞–Ω–∞: {country or 'N/A'}
üì° –û–ø–µ—Ä–∞—Ç–æ—Ä: {operator or 'N/A'}
‚úÖ –í–∞–ª–∏–¥–µ–Ω: {'–î–∞' if is_valid else '–ù–µ—Ç'}
"""
        await update.message.reply_text(info)
    except Exception as e:
        logger.error(f"Phone error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–æ–º–µ—Ä–∞")

async def get_social_info(update: Update, link: str):
    try:
        await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Å—ã–ª–∫—É...")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
        if "vk.com" in link:
            platform = "VK"
        elif "t.me" in link:
            platform = "Telegram"
        elif "instagram.com" in link:
            platform = "Instagram"
        elif "facebook.com" in link:
            platform = "Facebook"
        elif "twitter.com" in link:
            platform = "Twitter/X"
        elif "youtube.com" in link:
            platform = "YouTube"
        else:
            platform = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        info = f"""
üîó –°—Å—ã–ª–∫–∞: {link}
üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}
üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –î–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω—É–∂–Ω—ã API –∏–ª–∏ —Ä—É—á–Ω–æ–π OSINT
"""
        await update.message.reply_text(info)
    except Exception as e:
        logger.error(f"Social link error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å—Å—ã–ª–∫–∏")

# === Flask ===

@app.route("/")
def home():
    return "ü§ñ OSINT Bot is running!"

@app.route("/health")
def health():
    return "‚úÖ OK"

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===

def run_bot():
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    logger.info("‚ñ∂Ô∏è –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling...")
    application.run_polling(drop_pending_updates=True)

# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===

if __name__ == "__main__":
    # Flask –≤ —Ñ–æ–Ω–µ
    flask_thread = threading.Thread(
        target=lambda: app.run(
            host="0.0.0.0",
            port=int(os.environ.get("PORT", 5000)),
            debug=False,
            use_reloader=False
        ),
        daemon=True
    )
    flask_thread.start()
    logger.info("üåê Flask –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ")
    
    # –ë–æ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    run_bot()
