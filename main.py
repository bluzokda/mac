# main.py ‚Äî OSINT –±–æ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –í–ö

import os
import logging
import requests
import re
import ipaddress
import phonenumbers
from phonenumbers import geocoder, carrier
import dns.resolver
from bs4 import BeautifulSoup
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)
from flask import Flask
import threading

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
HIBP_API_KEY = os.getenv("HIBP_API_KEY")

if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")
    exit(1)

app = Flask(__name__)

# === –ö–ù–û–ü–ö–ò ===
keyboard = [
    ['üîç IP', 'üìû –ù–æ–º–µ—Ä'],
    ['üìß Mail', 'üìò VK'],
    ['/start']
]
reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# === –í–ê–õ–ò–î–ê–¢–û–†–´ ===

def is_ip(text):
    try:
        ipaddress.ip_address(text)
        return True
    except ValueError:
        return False

def is_email(text):
    return bool(re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', text))

def is_phone_number(text):
    cleaned = re.sub(r'[^\d+]', '', text)
    return bool(re.match(r'^\+?[1-9]\d{1,14}$', cleaned))

def is_vk_link(text):
    return bool(re.match(r'https?://(www\.)?vk\.com/[\w.-]+', text, re.IGNORECASE))

# === OSINT –§–£–ù–ö–¶–ò–ò ===

async def get_ip_info(update: Update, ip: str):
    await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é IP...")
    try:
        r = requests.get(f"https://ipapi.co/{ip}/json/", timeout=8)
        if r.status_code == 200:
            data = r.json()
            if not data.get("error"):
                info = f"""
üåê IP: {ip}
üìç –°—Ç—Ä–∞–Ω–∞: {data.get('country_name', 'N/A')}
üèôÔ∏è –ì–æ—Ä–æ–¥: {data.get('city', 'N/A')}
üì° –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {data.get('org', 'N/A')}
"""
                await update.message.reply_text(info)
                return
    except:
        pass
    
    try:
        r = requests.get(f"https://ipinfo.io/{ip}/json", timeout=8)
        if r.status_code == 200:
            data = r.json()
            info = f"""
üåê IP: {ip}
üìç –°—Ç—Ä–∞–Ω–∞: {data.get('country', 'N/A')}
üèôÔ∏è –ì–æ—Ä–æ–¥: {data.get('city', 'N/A')}
üì° –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {data.get('org', 'N/A')}
"""
            await update.message.reply_text(info)
            return
    except:
        pass
    
    await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± IP")

async def get_phone_info(update: Update, phone: str):
    await update.message.reply_text("üìû –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–æ–º–µ—Ä...")
    try:
        parsed = phonenumbers.parse(phone, None)
        country = geocoder.description_for_number(parsed, "ru")
        operator = carrier.name_for_number(parsed, "ru")
        is_valid = phonenumbers.is_valid_number(parsed)
        formatted = phonenumbers.format_number(parsed, phonenumbers.PhoneNumberFormat.INTERNATIONAL)
        
        info = f"""
üìû –ù–æ–º–µ—Ä: {formatted}
üìç –°—Ç—Ä–∞–Ω–∞: {country or 'N/A'}
üì° –û–ø–µ—Ä–∞—Ç–æ—Ä: {operator or 'N/A'}
‚úÖ –í–∞–ª–∏–¥–µ–Ω: {'–î–∞' if is_valid else '–ù–µ—Ç'}
"""
        await update.message.reply_text(info)
    except Exception as e:
        logger.error(f"Phone error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–æ–º–µ—Ä–∞")

async def get_email_info(update: Update, email: str):
    await update.message.reply_text("üìß –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é email...")
    try:
        domain = email.split('@')[1]
        try:
            mx_records = dns.resolver.resolve(domain, 'MX')
            mx_list = [str(mx.exchange) for mx in mx_records]
            mx_text = "\n".join(mx_list[:3])
        except:
            mx_text = "–ù–µ—Ç MX-–∑–∞–ø–∏—Å–µ–π"
        
        breach_info = "üîç –£—Ç–µ—á–∫–∏: –ù–µ –ø—Ä–æ–≤–µ—Ä—è–ª–æ—Å—å"
        if HIBP_API_KEY:
            try:
                headers = {"hibp-api-key": HIBP_API_KEY}
                r = requests.get(f"https://haveibeenpwned.com/api/v3/breachedaccount/{email}", headers=headers, timeout=10)
                if r.status_code == 200:
                    breaches = r.json()
                    names = [b['Name'] for b in breaches[:3]]
                    breach_info = f"üîç –£—Ç–µ—á–∫–∏: {', '.join(names)}"
                elif r.status_code == 404:
                    breach_info = "‚úÖ –£—Ç–µ—á–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            except:
                breach_info = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ç–µ—á–µ–∫"
        
        info = f"""
üìß Email: {email}
üåê –î–æ–º–µ–Ω: {domain}
üì¨ MX-—Å–µ—Ä–≤–µ—Ä—ã:
{mx_text}

{breach_info}
"""
        await update.message.reply_text(info)
    except Exception as e:
        logger.error(f"Email error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ email")

async def get_vk_info(update: Update, link: str):
    await update.message.reply_text("üìò –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–æ—Ñ–∏–ª—å –í–ö...")
    try:
        username = link.split('/')[-1].split('?')[0]
        url = f"https://vk.com/{username}"
        headers = {"User-Agent": "Mozilla/5.0"}
        r = requests.get(url, headers=headers, timeout=10)
        
        if r.status_code == 200:
            soup = BeautifulSoup(r.text, 'html.parser')
            title = soup.find('title')
            if title and "not found" not in title.text.lower():
                profile_name = title.text.replace(' | –í–ö–æ–Ω—Ç–∞–∫—Ç–µ', '').strip()
                info = f"""
üìò –ü—Ä–æ—Ñ–∏–ª—å –í–ö: {profile_name}
üîó –°—Å—ã–ª–∫–∞: {url}

üí° –î–∞–Ω–Ω—ã–µ:
‚Ä¢ –¢–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
‚Ä¢ –ó–∞–∫—Ä—ã—Ç—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è
"""
                await update.message.reply_text(info)
            else:
                await update.message.reply_text("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç")
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –í–ö")
    except Exception as e:
        logger.error(f"VK error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –í–ö")

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ:"
    await update.message.reply_text(text, reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ: '{text}'")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    if text == 'üîç IP':
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å IP-–∞–¥—Ä–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 8.8.8.8)")
        return
    elif text == 'üìû –ù–æ–º–µ—Ä':
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +79991234567)")
        return
    elif text == 'üìß Mail':
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å email (–Ω–∞–ø—Ä–∏–º–µ—Ä: user@gmail.com)")
        return
    elif text == 'üìò VK':
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –í–ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://vk.com/durov)")
        return
    elif text == '/start':
        await start(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if is_ip(text):
        await get_ip_info(update, text)
    elif is_phone_number(text):
        await get_phone_info(update, text)
    elif is_email(text):
        await get_email_info(update, text)
    elif is_vk_link(text):
        await get_vk_info(update, text)
    else:
        await update.message.reply_text("‚ùå –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!", reply_markup=reply_markup)

# === FLASK ===

@app.route("/")
def home():
    return "ü§ñ OSINT Bot is running!"

@app.route("/health")
def health():
    return "‚úÖ OK"

# === –ó–ê–ü–£–°–ö ===

def run_bot():
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    flask_thread = threading.Thread(
        target=lambda: app.run(
            host="0.0.0.0",
            port=int(os.environ.get("PORT", 5000)),
            debug=False,
            use_reloader=False
        ),
        daemon=True
    )
    flask_thread.start()
    logger.info("üåê Flask –∑–∞–ø—É—â–µ–Ω")
    run_bot()
