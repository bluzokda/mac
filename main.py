# main.py ‚Äî –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Python 3.13 + Railway

import os
import logging
import requests
import re
import ipaddress
import asyncio
import threading
from telegram import Update, Bot
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)
from flask import Flask

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Flask –¥–ª—è Railway health-check
flask_app = Flask(__name__)

@flask_app.route('/')
def home():
    return "ü§ñ OSINT Bot is running!"

@flask_app.route('/health')
def health():
    return "‚úÖ OK"

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN not found!")
    exit(1)

keyboard = [['/start', '/help'], ['IP Info', 'Domain Check']]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n–û—Ç–ø—Ä–∞–≤—å IP, –¥–æ–º–µ–Ω, email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω.",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìñ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text == 'IP Info':
        await update.message.reply_text("üîç –û—Ç–ø—Ä–∞–≤—å IP (–Ω–∞–ø—Ä–∏–º–µ—Ä: 8.8.8.8)")
    elif text == 'Domain Check':
        await update.message.reply_text("üåê –û—Ç–ø—Ä–∞–≤—å –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: google.com)")
    elif is_ip(text):
        await get_ip_info(update, text)
    else:
        await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã.")

def is_ip(text):
    try:
        ipaddress.ip_address(text)
        return True
    except ValueError:
        return False

async def get_ip_info(update: Update, ip: str):
    try:
        await update.message.reply_text("üîÑ –ó–∞–ø—Ä–æ—Å...")
        r = requests.get(f"https://ipapi.co/{ip}/json/", timeout=10)
        if r.status_code == 200:
            d = r.json()
            msg = f"üåê IP: {ip}\nüìç –°—Ç—Ä–∞–Ω–∞: {d.get('country_name', 'N/A')}"
            await update.message.reply_text(msg)
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ API")
    except Exception as e:
        logger.error(f"IP error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞")

# --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main_bot():
    # –£–¥–∞–ª—è–µ–º webhook
    bot = Bot(token=BOT_TOKEN)
    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("üßπ Webhook —É–¥–∞–ª—ë–Ω")

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await application.run_polling(drop_pending_updates=True)

# --- Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ ---
def run_flask():
    port = int(os.environ.get("PORT", 5000))
    flask_app.run(host="0.0.0.0", port=port, debug=False, use_reloader=False)

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ —Ñ–æ–Ω–µ
    threading.Thread(target=run_flask, daemon=True).start()
    logger.info("üåê Flask –∑–∞–ø—É—â–µ–Ω")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —á–µ—Ä–µ–∑ asyncio.run()
    asyncio.run(main_bot())
